<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    下面的namespace指的是一个名称空间, 可以暂时随便取名

-->
<mapper namespace="com.itheima.mapper.BrandMapper">
    <!--
        数据库表的字段名称   和   实体类的属性名称不一样, 则不能自动封装数据, 但是应该是可以通过手动调用set方法实现封装数据
        或者是将字段名称修改对sql查询字段的名称起别名
        或者
        * 起别名: 对不一样的列名起别名, 让别名和实体类的属性名一样
            缺点: 每次查询都要重新定义一遍别名
               sql片段: 作为解决方案
                    缺点: 不灵活
        * resultMap: 灵活解决
            1. 定义<resultMap>标签
            2. 在查询语句<select>标签中使用resultMap属性替换  resultType属性并且属性值为resultMap的id
    -->

    <!--对于属性和数据库中的字段名不一样的解决方案中可以使用resultMap对不一致的字段做出映射-->
    <!--使用resultMap标签作映射, 其中id作为标签的唯一标识可以任意取名, type指的是要映射的实体名称, 如果通过起别名的方式已经可以省略对应的包名, 就直接填写类名作为映射的实体名称, 也就是type支持别名-->
    <!--使用resultMap标签作映射的时候在标签内部可以嵌套其余的标签, 可以嵌套查询主键的标签id和查询一般键的标签result,column：表的列名
                property：实体类的属性名-->
    <!--
        id: 完成主键字段的映射
        result: 完成一般字段的映射
    -->
    <resultMap id="brandResultMap" type="brand">
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>

    <select id="selectAll" resultMap="brandResultMap">
        <!--resultMap参数在这里放置之前的resultMap标签的id值作为唯一的标识-->
        select *
        from tb_brand;
    </select>


    <!--起别名的方式-->
    <!--<select id="selectAll" resultType="brand">
        select
            id, brand_name as brandName, company_name as companyName, ordered, description, status
        from tb_brand;
    </select>-->
    <!--sql片段-->
    <!--<sql id="brand_column">
        &lt;!&ndash;@sql select &ndash;&gt;id, brand_name as brandName, company_name as companyName, ordered, description, status &lt;!&ndash;@sql from tb_brand&ndash;&gt;
    </sql>-->

    <!--<select id="selectAll" resultType="Brand">
        select
            <include refid="brand_column">
            </include>
        from tb_brand;
    </select>-->

    <!--原版第一代-->
    <!--    <select id="selectAll" resultType="brand">-->
    <!--        select-->
    <!--            *-->
    <!--        from tb_brand;-->
    <!--    </select>-->

    <!--根据id查询对应的select标签-->
    <!--
        * 参数占位符:
            1. #{}: 会将其替换为 ? 相当于使用prepareStatement中的使用? 作为占位符, 之后在对问号表示的参数进行取值, 这个功能可以方式SQL注入
            2. ${}: 直接拼接sql, 会存在sql注入问题
            3. 使用时机:
                * 在参数传递的时候使用#{}的方式放置SQL注入
                * 表名或者列名不固定的情况下可以使用${}的方式   但是会存在SQL注入的问题

        * 参数类型: parameterType表示参数类型, 但是这个参数可以省略
        * 特殊字符的处理: 例如: 小于号
            1. 转义字符 &lt;
            2. CDATA区: 之前在讲解XML的时候讲过

    -->


    <select id="selectById" resultMap="brandResultMap" parameterType="int">
        <!--使用#{}的方式将id以参数的形式传入-->
        <!--select *
        from tb_brand where id = #{id};&lt;!&ndash;这里的参数id一般情况下和接口中对应的参数名称保持一致&ndash;&gt;-->
        <!--使用${}的方式将id以-->
        select *
        from tb_brand
        where id = #{id};<!--这里的参数id一般情况下和接口中对应的参数名称保持一致-->
    </select>

    <!--<select id="selectById" resultMap="brandResultMap" parameterType="int">
        &lt;!&ndash;使用#{}的方式将id以参数的形式传入&ndash;&gt;
        &lt;!&ndash;select *
        from tb_brand where id = #{id};&lt;!&ndash;这里的参数id一般情况下和接口中对应的参数名称保持一致&ndash;&gt;&ndash;&gt;
        &lt;!&ndash;使用${}的方式将id以&ndash;&gt;
        select *
        from tb_brand where id  <![CDATA[<]]>  #{id};&lt;!&ndash;这里的参数id一般情况下和接口中对应的参数名称保持一致&ndash;&gt;
    </select>-->

    <!--&lt;!&ndash;使用多参数的方式查询对应的信息&ndash;&gt;
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        where status = #{status}
          and company_name like CONCAT('%', #{companyName}, '%')
          and brand_name like CONCAT('%', #{companyName}, '%');&lt;!&ndash;使用CONCAT()方法能够拼接字符串&ndash;&gt;
    </select>-->
    <!--<select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        where status = #{status}
        and company_name like #{companyName}
        and brand_name like #{brandName}
    </select>-->

    <!--使用多参数的方式查询对应的信息 -升级版-使用动态SQL条件查询 -->
    <!--
        动态SQL条件查询中有一个if标签等同于if在sql中的复现, if标签有一个属性test, 在test属性中填写对sql判断的逻辑表达式
        if: 条件判断    属性test: 填写需要的逻辑表达式
        但是将主键中的if标签中的test属性的参数限定不足时会出现异常, 所以要么对判断test中的逻辑表达式进行修改, 增加判空null和''
        要么可以添加恒等式和and进行语法的统一 ,如1=1和and
        <select id="selectByCondition" resultMap="brandResultMap">
            select *
            from tb_brand
            where 1 = 1
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="companyName != null and companyName !=''">
                and company_name like CONCAT('%', #{companyName}, '%')
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like CONCAT('%', #{brandName}, '%')
            </if>
        </select>
        使用<where>标签替换where关键字的方法也可以
    -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        <!--        where-->
        <where>
            <if test="status != null">
                status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                <!--因为需要使用赋值的值的变量名,不能使用在数据库中的字段名称-->
                and company_name like CONCAT('%', #{companyName}, '%')
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like CONCAT('%', #{brandName}, '%')<!--使用CONCAT()方法能够拼接字符串-->
            </if>
        </where>
    </select>

    <!--<select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        where
        <if test="status != null">
            status = #{status}
        </if>
        <if test="companyName != null">
            and company_name like #{companyName}
        </if>
        <if test="brandName != null">
            and brand_name like #{brandName}
        </if>
    </select>-->

    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <choose>
                <!--相当于定义了一个switch选择-->
                <when test="status != null">
                    <!--@ignoreSql-->
                    <!--相当于使用case语句进行判别-->
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != ''">
                    <!--@ignoreSql-->
                    <!--相当于使用case语句进行判别-->
                    company_name like CONCAT('%', #{companyName}, '%')
                </when>
                <when test="brandName != null and brandName != ''">
                    <!--@ignoreSql-->
                    <!--相当于使用case语句进行判别-->
                    brand_name like CONCAT('%', #{brandName}, '%')
                </when>
                <otherwise>
                    1 = 1;
                </otherwise>
            </choose>
        </where>
    </select>

    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        <!--注意在填写sql时表中的字段是不变的, 但是需要操作的数值都是通过创建的Java实体类的对象传入,传入的字段就是Java中的对象的属性-->
        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
    </insert>

    <update id="update">
        update tb_brand
        set brand_name   = #{brandName},
            company_name = #{companyName},
            ordered      = #{ordered},
            status       = #{status},
            description  = #{description}
        where id = #{id};
    </update>

    <update id="update2">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName},
            </if>
            <if test="ordered != null">
                ordered = #{ordered},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="description != null and description != ''">
                description = #{description}
            </if>
        </set>
        <where>
            id = #{id};
        </where>
    </update>
</mapper>
